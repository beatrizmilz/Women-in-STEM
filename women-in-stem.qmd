---
title: "Practical Implications of Using the Inverse Transformation in MLR"
author: "Lydia Gibson"
format: 
  revealjs:
    theme: moon
    footer: https://lgibson7.quarto.pub/women-in-stem/
---

# Introduction

```{r echo=FALSE, warning=FALSE, message=FALSE}
dat1 <- read.csv("women-stem.csv")

library(pacman)

suppressWarnings(p_load(dplyr, ggplot2, ggpubr, scales, MASS, car, lmtest, 
                        ggrepel, faraway, ggcorrplot, GGally, lindia, see, performance, qqplotr, ggstatsplot, rstantools, PMCMRplus, cowplot))

options(scipen = 100) # remove scientific notation
```

- In [previous research](https://github.com/lgibson7/Gender-Wage-Inequality-in-STEM), I explored the the relationship between gender demographics and median salary of major categories within STEM. 
- The final model used the inverse transformation of the response variable to improve the fit of the regression model.
- While transforming response and/or explanatory variables can lead to a better fitting model, often is not easily understood by the average person. 

# Outline

- Problem
- Data Source
- Methods
- Results
- Conclusion
- Further Research

# Problem

- How much prediction power is lost by not using a transformed response variable in a multiple linear regression model?

# Data Source

- I will be using [data](https://github.com/fivethirtyeight/data/blob/master/college-majors/women-stem.csv) obtained from the American Community Survey (ACS) 2010-2012 Public Use Microdata Series (PUMS). 

- It has 76 observations, each representing a STEM major, and 9 variables: `Rank`, `Major_code`, `Major`, `Major_category`, `Total`, `Men`, `Women`, `ShareWomen`, `Median`. 

# Method

- In this project, I will compare multiple linear regression models using both **with** a inverse transformation dependent response variable and **without** a inverse transformation dependent response variable.

---

```{r echo=FALSE, warning=FALSE, message=FALSE}

# remove Rank, Major_code, and Major
dat2 <- dat1[,-c(1,2,3)] 

# Get totals for men and women for each major category
dat_stats <- rbind(
  
#   Get totals for men
  dat2 %>% group_by(Major_category) %>%
    summarize(Grand_Total = sum(Men), Proportion=Grand_Total/sum(Total)) %>%
    mutate(Sex="Men", labelpos=Proportion/2),
  
# Get totals for women
dat2 %>% group_by(Major_category) %>%
 summarize(Grand_Total = sum(Women), Proportion=Grand_Total/sum(Total)) %>%
 mutate(Sex="Women", labelpos=1 - (Proportion/2))) %>% 
mutate(Sex = Sex %>% factor(levels=c("Women","Men")))

# Plot the gender proportions by major category
#dat_stats %>% ggplot(aes(x=Major_category,y=Proportion,fill=Sex)) +
  # stack side by side bars
 # stat_summary(geom = "bar", position="fill") +
  # get % labels
 # geom_text(aes(label = paste0(round(100*Proportion,2),"%"), 
 #               y=labelpos),size = 3,) +
  #scale_y_continuous(labels = scales::percent_format()) + 
 # labs(x="Major Category", y="Proportion of Gender (%)") +
 # scale_x_discrete(labels = scales::label_wrap(15)) +
  #scale_fill_manual(values = c("#fcdde5", "#73d1f9"))

#head(dat2)
```


```{r echo=FALSE, message=FALSE, warning=FALSE}
  
# Get the outliers
outlier_pts <- dat1 %>%filter(Median > 100000 & Major_category == "Engineering" | (Median > 60000 & Major_category == "Physical Sciences"))

# Get a box plot for Major category by Median
bx_plt <- dat2 %>% ggplot(aes(x=Major_category,y=Median)) + 
  geom_boxplot(show.legend=FALSE) +
    labs(x="Major Category", y="Median Salary ($ 1000)") + 
  theme(axis.text.x=element_text(angle=0)) + 
  # label outliers
  geom_text(data=outlier_pts, aes(label=Major),nudge_y=2, vjust=-1.6, hjust=0.7, color = "Black", size= 2) + 
  # change scale labels of Median
  scale_y_continuous(breaks=c(40000,60000,80000,100000), 
                     labels=c("40","60","80","100")) +
     # Wrap text for major categories
  scale_x_discrete(labels = scales::label_wrap(15))

bx_plt

```

---

```{r eval=FALSE}
ggbetweenstats(
  data  = dat2,
  x     = Major_category,
  y     = Median,
  title = "Distribution of Median Salaries across STEM Major Categories"
)
```

```{r eval=FALSE}


# Box plots with jittered points
# :::::::::::::::::::::::::::::::::::::::::::::::::::
# Change outline colors by groups: dose
# Use custom color palette
# Add jitter points and change the shape by groups
 p <- ggboxplot(dat2, x = "Major_category", y = "Median",
                color = "Major_category", 
                add = "jitter")
 #p
 
  
 # Add p-values comparing groups
 # Specify the comparisons you want
my_comparisons <- list( c("Engineering", "Physical Sciences"), c("Computers & Mathematics", "Physical Sciences"), c("Health", "Biology & Life Science") )
p + stat_compare_means(comparisons = my_comparisons)+ # Add pairwise comparisons p-value
  stat_compare_means(label.y = 50)                   # Add global p-value
```



```{r echo=FALSE, message=FALSE, warning=FALSE}

# Get the outliers
outlier_pts <- dat1 %>%filter(Median > 100000 |(Median > 60000 & Major_category == "Physical Sciences"))

jitter_plt <- dat1 %>%ggplot(aes(x=Major_category,y=Median, color=Major_category, size=ShareWomen)) +
  geom_jitter(alpha = 1/2) +# make circle transparent to show overlap
  theme(axis.text.x = element_text(angle=0, vjust=0.65),
        plot.subtitle = element_text(hjust=0.5),
        legend.position = "right") +
  geom_text(data=outlier_pts, aes(label=Major, size=0.11),nudge_y=2, vjust=-1.6, hjust=0.7, color = "black") + # label outliers
  
   labs(x="Major Category", y="Median Salary ($ 1000)") +
guides(color = F, # remove legend for color
         size = guide_legend( # change size legend
           override.aes = list(alpha = 1))) +
  # Wrap text for major categories
  scale_x_discrete(labels = scales::label_wrap(15)) +
  scale_size_binned(breaks = c(0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9, 1.0)) +
   # change scale labels of Median
  scale_y_continuous(breaks=c(40000,60000,80000,100000),
                     labels=c("40","60","80","100")) 

jitter_plt + scale_colour_viridis_d(option = "B")

```


```{r echo=FALSE, warning=FALSE, message=FALSE, eval=FALSE}
ggpairs(dat2[,c(6,1:5)], c(1,3:6))


```


# Results

---

```{r echo=FALSE, warning=FALSE, message=FALSE}
options(scipen=3)

lm_full <- lm(Median~.,data=dat2)

lm_reduced <- lm((Median^(-1)) ~ Major_category + Men + ShareWomen + Men*ShareWomen,
                 data=dat2)
#boxcox(lm_full, lambda=seq(-2.5, 0.5, by =0.5))
#summary(lm_full)$adj.r.squared

#library(performance)
#library(see)

p1 <- gghistogram(dat2$Median)
p2 <- gghistogram(dat2$Median^-1)

plot_grid(p1, p2)
```

------------------------------------------------------------------------

```{r}

#gg_qqplot(lm_full)

p3 <-gg_boxcox(lm_full)
check <- check_normality(lm_full)
p4 <- plot(check, type = "qq")

p5 <- gg_boxcox(lm_reduced)
check <- check_normality(lm_reduced)
p6 <- plot(check, type = "qq")

plot_grid(p3, p4, p5, p6)
```

------------------------------------------------------------------------

```{r}
gg_diagnose(lm_full)

```

------------------------------------------------------------------------

```{r}
gg_diagnose(lm_reduced)
```


```{r echo=FALSE, eval=F}
new_x<-data.frame(Major_category="Engineering", Men=2057, ShareWomen=0.12056434, Total=2339, Women=282

)
Median_Pet<-predict(lm_full, newdata = new_x, type = "response", interval = "prediction")

Median_Pet
```

```{r echo=FALSE, eval=F}
new_x<-data.frame(Major_category="Engineering", Men=2057, ShareWomen=0.12056434)
Median_Pet<-predict(lm_reduced, newdata = new_x, type = "response", interval = "prediction")

Median_Pet^-1
```

# Conclusion


# Further Research

-   I would like to export data from ACS API to get more recent data and rerun the linear regression model using the [TidyModels](https://github.com/tidymodels) framework.

-   I would like to compare and contrast the statistical data visualizations from the various ggplot2 extensions used in this presentation: ([`ggpubr`](https://github.com/kassambara/ggpubr), [`see`](https://github.com/easystats/see), [`performance`](https://github.com/easystats/performance), [`qqplotr`](https://github.com/aloy/qqplotr), [`ggstatsplot`](https://github.com/IndrajeetPatil/ggstatsplot), [`lindia`](https://github.com/yeukyul/lindia), [`ggcorrplot`](https://github.com/kassambara/ggcorrplot)), to the statistical data visualizations available in base R.

# Code Appendix

Code for this presentation can be found at <https://github.com/lgibson7/Women-in-STEM>.

